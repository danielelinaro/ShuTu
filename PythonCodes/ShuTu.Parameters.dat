# This is the parameter file for NeuTu.py, NeuTuAutoTrace, and NeuTuAutoTraceOneStack 
# Comment lines start with #
# IMPORTANT: The order of the parameters is strictly enforced!!! 
# Consult the code if unsure about the parameter order. 
# ALL UNITS OF LENGTH ARE IN MICRONS UNLESS SPECFIED. The lengths converted to pixel units in readParametersFromFile. 
# The paramters are grouped according to where they are used. 

######
# Image type, 0 for brightfield, 1 for dark field. 
#
######
0

###### 
# Parameters for speciying pixel dimensions in the tiff stack, magnifications. These are determined when taking the images. 
# IMPORTANT!!! Used in all programs. 
######

# PARAMS.xyDist, distance between pixels in xy plane
# 100X
0.065
# 63X
#0.103	

# PARAMS.zDist, distance in z between planes. 
0.5

#####
# Parameters for auto trace. Setting up
# In main of NeuTuAutoTrace.c and NeuTuAutoTraceOneStack.c 
#####

# PARAMS.nSplit, IMPORTANT, number of subdivision of a tiff stack in z (sub-slabs). 
# Increase this can help to resolve fine neurites in dense regions. But it will slow down the program. 
#8
# for very thick stack. 
16
# for simple stacks, testing
#1

# PARAMS.maxFracTotPoints, the maximum number of SWC points as a fraction of the pixel numbers in a stack. 
0.5

# PARAMS.zext, the extension of the z dimension in the sub-slabs. Useful for avoiding overlapping SWC points due to subdivisions. 
# Increase this if overlapping SWC points occurs at the boundaries between slabs. 
5.0

#####
# Parameters for creating 2D mask from 2D projections from the slabs. 
# In createMask2D, libNeuTu.c
#####

# PARAMS.sigmaFilter. sigma for valley delector using the Hessian approach. Typically close the half width of the thinnest neurite.
# Reduce if the image is crispy. Increase if there are two much random noise. But do not make it too big such nearby neurites merge
# in the mask. 
0.1

# PARAMS.sparse, range from 0 to 1. IMPOARTANT, upper limit of sparseness in determining the threshold with Hessian matrix. 
# Top PARAMS.sparse fraction of pixels are assigned as the forground of the intial mask.
# Increase this fraction is too the mask misses too much neurite in the projection.
# Decreate if too much noise is introduced.  
0.1

# PARAMS.sigmaBack, length scale sigma for Gaussian smoothing to get the smooth background. 
# This background is substracted from the 2D projection. 
2.0

# PARAMS.smallArea, unit micron^2, area of small patches to be removed in the mask. Useful for removing noise. 
# Increase to reduce noise. Typically set at 1 micron^2. 
1.0

# PARAMS.lambdaRatioThr, ranges from 1 to 10, threshold for the ratio lambda1/lambda2 in Hessian to supress blob. 
# Increasing this number suppresses blob structures and encourages line like structures. 
10.0 

# PARAMS.levelSetIter, number of iterations for levelset smoothing. 
# Smoothing is important for accurate reconstruction. Smoothing tend to thicken the mask compare to neurite. 
# Reduce this number if the mask becomes too thick. But small iteration will make inaccurate and noisy reconstruction. 
500

# PARAMS.levelSetMu, larger than 0, levelset parameter for controlling the smoothness of the mask. 
# Typically set to zero, but can increase this to make the mask smoother. 
0.1

#####
# Parameters for skeletonization from the mask. 
# In pruneSmallBranches, libNeuTu.c
#####

# PARAMS.smallLen, micron, length smaller than this in skeleton are pruned. 
# Useful deleting small branches, which are mostly noise. 
0.5

#####
# Parameters for getting linked points, which is the basis for generating the SWC file.
# In getLinkedPointsFromSkeletonAnd3D, growFromEndPoints, connectEndPoints, libNeuTu.c
#####

# PARAMS.sigmaSmooth, for Gaussian smoothing the skeleton segments when creating the linked point segments. 
0.5

# PARAMS.zJumpFact, IMPORTANT, factor for determing whether two points should be disconnected because of too large z-jump. 
# The formula is if the  zfact * abs(z1 - z2) > zJumpFact * (r1 + r2), the two points are disconnected. r1, r2 are radii. 
# Decrease this factor to guard against connecting points far apart in depth. But making it too small creates many unconnected segements. 
2.0

# PARAMS.distFactor, IMPORTNAT, factor for disconnecting two points. If the 2D distance between two points is larger than 
# this factor multiplied by the (r1 + r2), the two points are not connected. 
# Useful for guarding against connecting too remote points. 
2.0

# PARAMS.angle, in degrees. If the turn of the new points is more than this angle, the new point is disconnected. 
# This enforces the staightness of the reconstructed branches. Assumes no sharp turns. It is better to mannually deal with 
# sharp turns when they do exist. 
60

# PARAMS.drFactor, greater than 0, a factor for reducing the distance between linked points for large radius. 
# If it is desirable to get more dense SWC points, for large radius, increase this factor. 
0.1

#####
# Parameters for growing from end points to fill in and bridges gaps. 
# In growFromEndPoints, libNeuTu.c.
#####

# PARAMS.factSearchMax, this factor multiplied by the radius is the maximum range for searching for the next point.
6.0

# PARAMS.factSearchMin, this factor multiplied by the radius is the minimum range for searching for the next point.
# Don't make this factor smaller than 2, oterwise the next point will be too close to existing point and rejected. 
2.5

# PARAMS.zBoxSize, micron, the z dimension of a volume around an end point for searching the next linked point for growing, 
2.5

#####
# IMPORTANT! Parameters for determining the validity of the linked points. These are crucial parameters for 
# judging whether a linked point is at the neurite, and whether it has the correct radius. Also used to correct the positions of 
# the linked points. 
# In checkValidityOfLinkedPoint, libNeuTu.c.
#####

# PARAMS.minRange, minimum range for computing the extent of the inverse peak. Typically set at 4*r if this is bigger than the minRange. 
3.0

# PARAMS.sigmaSmoothCurve, for smoothing the inverse peak. Imporant for judging the position and width of the peak. 
0.3

# PARAMS.sparseThreshold, range from 0 to 1, the fraction of top values in the curves. This is used  to determine the starting point of the background
# in judging the validity of the linked point. Increasing this value makes the judgement more strict. 
0.5

# PARAMS.factSigmaThreshold, factor for determing the threshold for the background from the inverse peak curves. 
# The threshold is set at mmd - factSigmaThreshol * sigma, where mmd is the starting point determined by 
# sparseThreshold, and sigma is the fluctuation of the unsmoothed curve around the smoothed curve. 
# Increasing this makes the judgement more strict. 
15.0

# PARAMS.factSmallDeriv, factor for determining the smallness in changes in the derivative. The threshold is set at this factor multiplied by sigma from the curves.  
# This prevents stopping as tiny wiggles in the curves when searching for the width of the inverse peak.
# IMPORTANT!
0.1

# PARAMS.minRadius, micron, minimum radius of the linked point. Points smaller than this are considered noise. 
0.2

# PARAMS.maxRadius, micron, maxium radius of the linked point. Points larger than this are considered noise. 
10.0

# PARAMS.factShift, this factor multiplied by r is the maximum shift allowed in the xy position of the linked point. 
# If the shift is more than this, the linked point is invalid. 
# Increase this factor to allow larger shifts. 
2.0

# PARAMS.factAdjustRadius, factor for adjusting the radius measured. Often the width of the inverse peak can be consistently 
# larger or smaller than the actual widths of the neurite. Use this factor to adjust. 
0.8

#####
# Parameters for marking occupied pixels. IMPORTANT!
# In markPixelsOccupiedTwoPoints, libNeuTu.c.
#####

# PARAMS.factMarkOccXY, pixels around an accepted linked point are marked occupied. This factor times the radius is the range in xy.
1.0

# PARAMS.zOcc, micron, pixels around an accepted linked point are marked occupied. This is the z extent. 
2.0

#####
# Parameters for connecting end points. 
# In connectEndPoints, libNeuTu.c.
#####

# PARAMS.distFactConn, sets the minimum distance for connecting points, distFactConn *(r1 + r2), where r1, r2 are the radii of the points to be connected.  
5.0

#####
# Parameters for creating SWC structure. 
#
#####

# PARAMS.minNumPointsBr, minimum number of points in a leaf branch for accepting. 
3

# PARAMS.minNumPointsBrIso, minimum number of points in an isolated branch for accepting. 
5

#####
# Parameter for detecting soma. 
#
#####

# PARAMS.somaLengthScale, micron, length scale of soma, for detecting soma and getting thick dendrites, 
3.0

# PARAMS.somaSparseThr, fraction of top darkest pixels for getting the mask for the soma. 
0.05

#####
# Parameter for shortest distance, in pixelDistance and pixelDistanceZ in libNeuTu.c
#
#####

# PARAMS.alphaDistance; factor for weighted shortest distance. Used in computing left right shortest path and in extending from ends. 
20
